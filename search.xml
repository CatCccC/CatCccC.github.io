<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java 多数据源demo]]></title>
    <url>%2F2019%2F04%2F%3Ajava%2Fjava%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[环境使用 spring boot 2.1.4,mybatis,druid 框架 构建.数据库为mysql5.7 测试demo详细的代码配置请从github 下载查看 配置文件如下,根据druid 的文档以及,spring boot2 变更,属性无法继承导致,每个数据源需要配置一份. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//application.ymldatasource: druid: filter: stat: enabled: true wall: config: none-base-statement-allow: true #是否允许执行非基本语句 multi-statement-allow: true #是否允许执行多个语句 enabled: true config: enabled: true log4j2: enabled: true statement-executable-sql-log-enable: true db1: db-type: mysql driver-class-name: com.mysql.jdbc.Driver max-active: 200 #连接池最大值 initial-size: 10 # 初始化大小 max-wait: 30000 #获取连接最大等待时间 min-idle: 10 #连接池最小空闲 time-between-eviction-runs-millis: 30000 #逐出连接的检测时间间隔 min-evictable-idle-time-millis: 30000 #最小逐出时间 validation-query: SELECT 1 #检测连接是否有效的SQL testWhileIdle: true #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 testOnBorrow: false #借出连接时是否做测试 testOnReturn: true #归还连接时是否做测试 removeAbandoned: true #超过时间限制是否回收 removeAbandonedTimeout: 3600 # 超过时间限制多长 max-pool-prepared-statement-per-connection-size: 50 #启用PSCache db2: db-type: mysql driver-class-name: com.mysql.jdbc.Driver max-active: 200 #连接池最大值 initial-size: 10 # 初始化大小 max-wait: 30000 #获取连接最大等待时间 min-idle: 10 #连接池最小空闲 time-between-eviction-runs-millis: 30000 #逐出连接的检测时间间隔 min-evictable-idle-time-millis: 30000 #最小逐出时间 validation-query: SELECT 1 #检测连接是否有效的SQL testWhileIdle: true #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 testOnBorrow: false #借出连接时是否做测试 testOnReturn: true #归还连接时是否做测试 removeAbandoned: true #超过时间限制是否回收 removeAbandonedTimeout: 3600 # 超过时间限制多长 max-pool-prepared-statement-per-connection-size: 50 #启用PSCache 123456789101112application-dev.ymldruid: db1: name: db1 url: jdbc:mysql://192.168.50.100:3306/db1?allowMultiQueries=true&amp;autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8 username: db1 password: 123456 db2: name: db2 url: jdbc:mysql://192.168.50.100:3306/db2?allowMultiQueries=true&amp;autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8 username: db2 password: 123456 在单数据源项目中,我们使用 spring boot 以及 相关的mybatis starter 我们使用配置文件即可 自动配置相关的对象但是在多数据源项目中 ,目前 我们需要将配置文件中 关于mybatis 的项目手动注入到 相关的对象中例如 以下配置 1234567891011121314mybatis: # mybatis config 其他配置 需要到 SqlSessionFactoryBean 中 手动配置 configuration: cache-enabled: true #全局映射器启用缓存 multiple-result-sets-enabled: true #对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 use-column-label: true #允许使用列标签代替列名 use-generated-keys: false #不允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 - auto-mapping-behavior: partial #给予被嵌套的resultMap以字段-属性的映射支持 FULL,PARTIAL safe-row-bounds-enabled: false #允许在嵌套语句上使用RowBounds mapUnderscoreToCamelCase: true #自动映射 localCacheScope: session #缓存会话范围 jdbcTypeForNull: other #当没有特定的JDBC类型时，指定空值的JDBC类型为参数提供了。 某些驱动程序需要指定列JDBC类型但其他类型使用泛型值，如NULL，VARCHAR或OTHER lazyLoadTriggerMethods: equals,clone,hashCode,toString #指定哪个Object的方法触发延迟加载 aggressive-lazy-loading: false # 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指 定)，不会加载关联表的所有字段，以提高性能 将配置 注入到sqlSessionFactory 123456789101112131415161718192021222324private final MybatisProperties myBatisProperties;//或者配置文件中的 属性 public DB1DataSourceConfig( MybatisProperties myBatisProperties) &#123; this.myBatisProperties = myBatisProperties; &#125; @Bean(name = "db1SqlSessionFactory") public SqlSessionFactory db1SqlSessionFactory( @Qualifier("db1DataSource") DataSource db1DataSource) throws Exception &#123; final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean(); sessionFactory.setDataSource(db1DataSource); sessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver() .getResources(DB1DataSourceConfig.MAPPER_LOCATION)); //sessionFactory.setTypeAliasesPackage("com.xx.po"); org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session .Configuration(); if (myBatisProperties.getConfiguration() != null) &#123; BeanUtils.copyProperties(myBatisProperties.getConfiguration(), configuration); &#125; sessionFactory.setConfiguration(configuration); return sessionFactory.getObject(); &#125; 仍然存在一些问题: mybatis 中其他一些配置 硬编码在代码中 例如TypeAliasesPackage 某些属性的变动仍然需要 修改代码 才能生效 多数据源与单数据源的对比单数据源: 配置简单 事务管理清晰 多数据源: 配置繁琐 ,每一个数据源都需要重复 DataSource,DataSourceTransactionManager,SqlSessionFactory 每个事务管理 都需要指定对应的SqlSessionFactory 多个数据源事务 无法嵌套提交,一致性的问题 可参加 分布式事务的 最终一致性 相关的解决方法 总结查询相关资料中,对于多数据源配置 做了一些总结,希望有所帮助在demo 中,有简单的事务测试,例如多数据源嵌套提交会产生java.lang.IllegalStateException: Transaction synchronization 的问题.以及多数据源提交的规则.至于如何解决一致性问题是另外一个比较大的问题. 其他实现spring 有相关动态数据源切换的方案, 可用 google 搜索相关文档 参考链接以下参考链接由于当时未记录,只显示当前链接 github kazuki43zoo github mybatis issues]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vagrant基本指南]]></title>
    <url>%2F2019%2F04%2F%3Alinux%2Fvagrant%E5%9F%BA%E6%9C%AC%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[安装vagrant和virtual box vagrant 下载目录 virtualbox 下载目录 安装插件 1vagrant plugin install vagrant-vbguest --plugin-clean-sources --plugin-source https://gems.ruby-china.com/ 安装开发环境Vagrant的基本单元叫做box，我们可以理解为镜像，首先我们需要添加一个Vagrant公开的镜像到我们本地，用来搭建环境。我选择的是一个centos镜像，下面的操作我们可以理解为下载镜像。 在线安装镜像123456789101112131415161718192021创建指定目录 初始化 centos7➜ test vagrant init centos/7 A `Vagrantfile` has been placed in this directory. You are nowready to `vagrant up` your first virtual environment! Please readthe comments in the Vagrantfile as well as documentation on`vagrantup.com` for more information on using Vagrant.会创建一个Vagrantfile 配置文件,此文件可以指定网卡 配置指定ip,等等虚拟机配置➜ test ls Vagrantfile启动虚拟机(本地没有镜像,则会下载镜像,由于众所周知的网络问题,下载十分缓慢)➜ test vagrant up Bringing machine 'default' up with 'virtualbox' provider...==&gt; default: Box 'centos/7' could not be found. Attempting to find and install... default: Box Provider: virtualbox default: Box Version: &gt;= 0==&gt; default: Loading metadata for box 'centos/7' default: URL: https://vagrantcloud.com/centos/7==&gt; default: Adding box 'centos/7' (v1902.01) for provider: virtualbox default: Downloading: https://vagrantcloud.com/centos/boxes/7/versions/1902.01/providers/virtualbox.box default: Download redirected to host: cloud.centos.org default: Progress: 7% (Rate: 112k/s, Estimated time remaining: 1:04:13) 离线安装镜像 离线下载镜像 例如 centos7 或者 vagrant 镜像 中寻找所需的镜像 添加镜像 1234567891011➜ test vagrant box add /data/uget/CentOS-7-x86_64-Vagrant-1902_01.VirtualBox.box ==&gt; box: Box file was not detected as metadata. Adding it directly...A name is required when adding a box file directly. Please passthe `--name` parameter to `vagrant box add`. See`vagrant box add -h` for more help.➜ test vagrant box add centos7 /data/uget/CentOS-7-x86_64-Vagrant-1902_01.VirtualBox.box==&gt; box: Box file was not detected as metadata. Adding it directly...==&gt; box: Adding box 'centos7' (v0) for provider: box: Unpacking necessary files from: file:///data/uget/CentOS-7-x86_64-Vagrant-1902_01.VirtualBox.box==&gt; box: Successfully added box 'centos7' (v0) for 'virtualbox'!➜ test 初始化,启动 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758➜ test vagrant init centos7 A `Vagrantfile` has been placed in this directory. You are nowready to `vagrant up` your first virtual environment! Please readthe comments in the Vagrantfile as well as documentation on`vagrantup.com` for more information on using Vagrant.➜ test vagrant up Bringing machine 'default' up with 'virtualbox' provider...==&gt; default: Importing base box 'centos7'...==&gt; default: Matching MAC address for NAT networking...==&gt; default: Setting the name of the VM: test_default_1553138067037_50554==&gt; default: Clearing any previously set network interfaces...==&gt; default: Preparing network interfaces based on configuration... default: Adapter 1: nat==&gt; default: Forwarding ports... default: 22 (guest) =&gt; 2222 (host) (adapter 1)==&gt; default: Booting VM...==&gt; default: Waiting for machine to boot. This may take a few minutes... default: SSH address: 127.0.0.1:2222 default: SSH username: vagrant default: SSH auth method: private key default: default: Vagrant insecure key detected. Vagrant will automatically replace default: this with a newly generated keypair for better security. default: default: Inserting generated public key within guest... default: Removing insecure key from the guest if it's present... default: Key inserted! Disconnecting and reconnecting using new SSH key...==&gt; default: Machine booted and ready![default] No Virtualbox Guest Additions installation found.Loaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * base: mirrors.163.com * extras: mirrors.cn99.com * updates: mirrors.163.comPackage binutils-2.27-34.base.el7.x86_64 already installed and latest versionPackage 1:make-3.82-23.el7.x86_64 already installed and latest versionPackage bzip2-1.0.6-13.el7.x86_64 already installed and latest versionResolving Dependencies--&gt; Running transaction check................................Verifying archive integrity... All good.Uncompressing VirtualBox 6.0.4 Guest Additions for Linux........VirtualBox Guest Additions installerCopying additional installer modules ...Installing additional modules ...VirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel modules. This may take a while.VirtualBox Guest Additions: To build modules for other installed kernels, runVirtualBox Guest Additions: /sbin/rcvboxadd quicksetup &lt;version&gt;VirtualBox Guest Additions: Building the modules for kernel 3.10.0-957.5.1.el7.x86_64.VirtualBox Guest Additions: Starting.Redirecting to /bin/systemctl start vboxadd.serviceRedirecting to /bin/systemctl start vboxadd-service.serviceUnmounting Virtualbox Guest Additions ISO from: /mntCleaning up downloaded VirtualBox Guest Additions ISO...==&gt; default: Checking for guest additions in VM...==&gt; default: Rsyncing folder: /data/vmbox/test/ =&gt; /vagrant 由于镜像 Virtualbox Guest Additions 未安装 ,第一次启动会安装 Virtualbox Guest Additions 耗时比较久 需要耐心等待 虚拟机操作 进入虚拟机 123➜ test vagrant sshLast login: Thu Mar 21 03:23:43 2019 from 10.0.2.2[vagrant@localhost ~]$ 虚拟机默认用户为 vagrant,密码为vagrantvagrant 默认配置sudo 免密码 私有镜像添加私有镜像私有镜像基于centos 制作,已安装docker,jdk,maven,zsh等等 1vagrant box add dev:centos7 http://xx:8086/centosdev.json 启动私有镜像12vagrant init dev:centos7 vagrant up 更新镜像原有镜像内容共享目录会销毁 123#销毁操作vagrant destroy vagrant up 打包镜像 制作不带配置的镜像 1vagrant package --output xx.box 制作带配置的镜像 1vagrant package --output xx.box --vagrantfile Vagrantfile –output：打包的名字 –vagrantfile：设置这个参数以后，就可以把Vagrantfile里面的配置打近包里面，这样其他开发人员下载镜像的时候就不需要重新配置了。 just wait , tea or coffee 镜像发布发布到vagrant仓库TODO 发布到私有仓库TODO 注意镜像升级时虚拟机内所有除共享目录下的文件 都会更新为新的镜像的内容.因此需要把私有文件保存在共享目录中]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vagrant</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
</search>
